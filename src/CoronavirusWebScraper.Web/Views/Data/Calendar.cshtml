@{
    ViewData["Title"] = "Statistic Calendar";
}

<br />
<div class="row text-center">
    <button class="btn btn-outline-primary btn-lg col-sm" onclick="prevMonth()">Prev</button>
    <h1 id="table-header" class="col-lg"></h1>
    <button class="btn btn-outline-primary btn-lg col-sm" onclick="nextMonth()">Next</button>
</div>
<br />

<div id="calendar" class="row"></div>

<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button class="btn btn-primary me-md-2" type="button" onclick="goToCurrDate()">Go to current date</button>
</div>

<script>

    async function getListOfDates() {
        try {
            let response = await fetch('/dates');
            return await response.json();
        } catch (error) {
            console.log(error);
        }
    }


    async function createCalendar(elem, year, month) {

        let listOfDates = await getListOfDates();


        let takeCurrenDate = new Date();

        // months in JS are 0..11, not 1..12

        let d = new Date(year, month);





        document.getElementById('table-header').textContent = `${d.toLocaleString('default', { month: 'long' })} / ${year}`;


        let table = '<table class="table table-responsive-sm table-hover table-dark"><tr><th>MON</th><th>TUE</th><th>WED</th><th>THU</th><th>FRI</th><th>SAT</th><th>SUN</th></tr><tr>';


        // spaces for the first row
        // from Monday till the first day of the month
        // * * * 1  2  3  4
        for (let i = 0; i < getDay(d); i++) {
            table += '<td></td>';
        }

        // <td> with actual dates
        while (d.getMonth() == month) {
            let bb = new Date(d.getFullYear(), d.getMonth(), d.getDate());


            if (isIncluded(listOfDates, bb)) {
                table += `<td class="border border-primary"><a href='/Dates?Date=${d.getFullYear()}.${d.getMonth()}.${d.getDate()}' class= "text-primary">` + d.getDate() + '</a></b></td>';
            }


            else if (d.getDate() == takeCurrenDate.getDate() && d.getFullYear() == takeCurrenDate.getFullYear() && d.getMonth() == takeCurrenDate.getMonth()) {
                table += '<td class="btn btn-primary"><b>' + d.getDate() + '</b></td>';
            } else {
                table += '<td>' + d.getDate() + '</td>';

            }


            if (getDay(d) % 7 == 6) { // sunday, last day of week - newline
                table += '</tr><tr>';
            }

            d.setDate(d.getDate() + 1);
        }

        // add spaces after last days of month for the last row
        // 29 30 31 * * * *
        if (getDay(d) != 0) {
            for (let i = getDay(d); i < 7; i++) {
                table += '<td></td>';
            }
        }

        // close the table
        table += '</tr></table>';


        elem.innerHTML = table;
    }

    function getDay(date) { // get day number from 0 (monday) to 6 (sunday)
        let day = date.getDay();

        if (day == 0) day = 7; // make Sunday (0) the last day

        return day - 1;
    }

    let currentDate = new Date();

    createCalendar(calendar, currentDate.getFullYear(), currentDate.getMonth());

    function prevMonth() {

        currentDate.setMonth(currentDate.getMonth() - 1);

        createCalendar(calendar, currentDate.getFullYear(), currentDate.getMonth())
    }

    function nextMonth() {

        currentDate.setMonth(currentDate.getMonth() + 1);
        createCalendar(calendar, currentDate.getFullYear(), currentDate.getMonth())
    }

    function goToCurrDate() {
        currentDate = new Date();
        createCalendar(calendar, currentDate.getFullYear(), currentDate.getMonth())
    }


    function isIncluded(listOfDates, currDate) {


        var contains = listOfDates.some(elem => {
            return JSON.stringify(currDate.getTime()) === JSON.stringify(new Date(elem).getTime());
        });

        if (contains) {
            return true;
        } else {
            return false;
        }
    }
</script>
